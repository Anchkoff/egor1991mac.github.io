(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.ExternalSvgPolyfill = factory());
}(this, function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var Polyfill = (function () {
        function Polyfill(options) {
            this.defaults = {
                target: 'svg use',
                context: window.document.body || window.document.documentElement,
                root: window.document.body || window.document.documentElement,
                run: true,
                prefix: true,
                detect: true,
                observe: true,
                crossdomain: true,
                namespace: 'external-svg-polyfill',
                agents: [
                    /msie|trident/i,
                    /edge\/12/i,
                    /ucbrowser\/11/i,
                ],
            };
            this.options = __assign({}, this.defaults, options);
            this.cache = {
                files: new Map(),
                elements: new Map(),
            };
            this.handler = {
                viewportChange: this.onViewportChange.bind(this),
                documentChange: this.onDocumentChanged.bind(this),
            };
            this.observer = new MutationObserver(this.handler.documentChange);
            this.parser = window.document.createElement('a');
            this.process = !this.options.detect || this.detect();
            this.options.run && this.run();
        }
        Polyfill.prototype.run = function () {
            this.updateElements();
            this.options.observe && this.observe();
        };
        Polyfill.prototype.detect = function () {
            return this.options.agents.some(function (agent) { return agent.test(window.navigator.userAgent); });
        };
        Polyfill.prototype.observe = function () {
            this.observer.observe(this.options.context, {
                childList: true,
                subtree: true,
            });
            window.addEventListener('resize', this.handler.viewportChange);
            window.addEventListener('orientationchange', this.handler.viewportChange);
        };
        Polyfill.prototype.unobserve = function () {
            this.observer.disconnect();
            window.removeEventListener('resize', this.handler.viewportChange);
            window.removeEventListener('orientationchange', this.handler.viewportChange);
        };
        Polyfill.prototype.destroy = function () {
            var _this = this;
            this.unobserve();
            this.cache.elements.forEach(function (value, element) {
                _this.dispatchEvent(element, 'revoke', { value: value }, function () {
                    _this.renderFrame(function () {
                        _this.setLinkAttribute(element, value);
                        _this.cache.elements.delete(element);
                    });
                });
            });
            this.cache.files.forEach(function (file, address) {
                file && _this.dispatchEvent(file, 'remove', { address: address }, function () {
                    _this.renderFrame(function () { return _this.options.root.removeChild(file); });
                    _this.cache.files.delete(address);
                });
            });
        };
        Polyfill.prototype.updateElements = function () {
            var elements = typeof this.options.target === 'string'
                ? [].slice.call(this.options.context.querySelectorAll(this.options.target))
                : this.options.target;
            Array.from(elements).forEach(this.processElement.bind(this));
        };
        Polyfill.prototype.processElement = function (element) {
            var _this = this;
            var value = element.getAttribute('href') || element.getAttribute('xlink:href');
            if (value && !value.startsWith('#') && !this.cache.elements.has(element)) {
                this.parser.href = value;
                if (this.process || (this.options.crossdomain && window.location.origin !== this.parser.origin)) {
                    var address_1 = this.parser.href.split('#')[0];
                    var identifier_1 = this.generateIdentifier(this.parser.hash, this.parser.pathname);
                    if (address_1 && !this.cache.files.has(address_1)) {
                        this.dispatchEvent(element, 'load', { address: address_1 }, function () {
                            _this.cache.files.set(address_1, null);
                            _this.loadFile(address_1);
                        });
                    }
                    this.dispatchEvent(element, 'apply', { address: address_1, identifier: identifier_1 }, function () {
                        _this.renderFrame(function () {
                            _this.setLinkAttribute(element, "#" + identifier_1);
                            _this.cache.elements.set(element, value);
                        });
                    });
                }
            }
        };
        Polyfill.prototype.loadFile = function (address) {
            var _this = this;
            var loader = new XMLHttpRequest();
            loader.addEventListener('load', function (event) { return _this.onFileLoaded.call(_this, event, address); });
            loader.open('get', address);
            loader.responseType = 'document';
            loader.send();
        };
        Polyfill.prototype.generateIdentifier = function (identifier, prefix) {
            identifier = identifier.replace('#', '');
            prefix = prefix.replace(/^\//, '').replace(/\.svg$/, '').replace(/[^a-zA-Z0-9]/g, '-');
            return this.options.prefix
                ? prefix + "-" + identifier
                : identifier;
        };
        Polyfill.prototype.dispatchEvent = function (element, name, detail, callback) {
            var event = window.document.createEvent('CustomEvent');
            event.initCustomEvent(this.options.namespace + "." + name, true, true, detail);
            element.dispatchEvent(event);
            if (!event.defaultPrevented && callback) {
                callback();
            }
        };
        Polyfill.prototype.renderFrame = function (callback) {
            window.requestAnimationFrame(callback.bind(this));
        };
        Polyfill.prototype.setLinkAttribute = function (element, value) {
            element.hasAttribute('href') && element.setAttribute('href', value);
            element.hasAttribute('xlink:href') && element.setAttribute('xlink:href', value);
        };
        Polyfill.prototype.prefixValues = function (file, prefix) {
            var _this = this;
            [].slice.call(file.querySelectorAll('[id]')).forEach(function (reference) {
                var value = reference.getAttribute('id');
                var identifier = _this.generateIdentifier(value, prefix);
                reference.setAttribute('id', identifier);
                [].slice.call(file.querySelectorAll("[fill=\"url(#" + value + ")\"]")).forEach(function (referencee) {
                    referencee.setAttribute('fill', "url(#" + identifier + ")");
                });
            });
        };
        Polyfill.prototype.onDocumentChanged = function () {
            this.updateElements();
        };
        Polyfill.prototype.onViewportChange = function () {
            this.updateElements();
        };
        Polyfill.prototype.onFileLoaded = function (event, address) {
            var _this = this;
            var file = event.target.response.documentElement;
            file.setAttribute('aria-hidden', 'true');
            file.style.position = 'absolute';
            file.style.overflow = 'hidden';
            file.style.width = 0;
            file.style.height = 0;
            this.cache.files.set(address, file);
            if (this.options.prefix) {
                this.parser.href = address;
                this.prefixValues(file, this.parser.pathname);
            }
            this.dispatchEvent(this.options.root, 'insert', { address: address, file: file }, function () {
                _this.renderFrame(function () {
                    _this.options.root.insertAdjacentElement('afterbegin', file);
                });
            });
        };
        return Polyfill;
    }());

    return Polyfill;

}));
//# sourceMappingURL=bundle.js.map
